<?php

namespace BfwSql\Observers;

use \Exception;
use \BfwSql\Actions\AbstractActions;

/**
 * Requests observer.
 * Create a log with requests executed and informations about it.
 * 
 * @package bfw-sql
 * @author Vermeulen Maxime <bulton.fr@gmail.com>
 * @version 2.0
 */
class Basic implements \SplObserver
{
    /**
     * @const ERR_SYSTEM_QUERY_CONTEXT_CLASS Exception code if we receive the
     * event "system query" with(out) a query generated by the system.
     */
    const ERR_SYSTEM_QUERY_CONTEXT_CLASS = 2401001;
    
    /**
     * @var \BFW\Monolog $monolog The bfw monolog instance define for bfw-sql
     */
    protected $monolog;
    
    /**
     * @var string $action The last action to send to observers
     */
    protected $action = '';
    
    /**
     * @var mixed $context The context to send to observers
     */
    protected $context = null;
    
    /**
     * Constructor
     * 
     * @param \BFW\Monolog $monolog
     */
    public function __construct(\BFW\Monolog $monolog)
    {
        $this->monolog = $monolog;
    }
    
    /**
     * Getter accessor to monolog property
     * 
     * @return \BFW\Monolog
     */
    public function getMonolog()
    {
        return $this->monolog;
    }
    
    /**
     * Getter accessor to action property
     * 
     * @return string
     */
    public function getAction()
    {
        return $this->action;
    }
    
    /**
     * Getter accessor to context property
     * 
     * @return mixed
     */
    public function getContext()
    {
        return $this->context;
    }
    
    /**
     * {@inheritdoc}
     */
    public function update(\SplSubject $subject)
    {
        if ($this->haveMonologHandler() === false) {
            return;
        }
        
        $this->action  = $subject->getAction();
        $this->context = $subject->getContext();
        
        $this->analyzeUpdate();
    }
    
    /**
     * Check if there are handlers declared to monolog.
     * Not need to run the system if there are no place to send the infos.
     * 
     * @return boolean
     */
    protected function haveMonologHandler()
    {
        $handlers = $this->monolog->getHandlers();
        
        return !empty($handlers);
    }
    
    /**
     * Analyze the update sent by subjects to search if the notify is for us
     * 
     * @return void
     */
    protected function analyzeUpdate()
    {
        if ($this->action === 'user query') {
            $this->userQuery();
        } elseif ($this->action === 'system query') {
            $this->systemQuery();
        }
    }
    
    /**
     * Log a query generate/writed by an user.
     * 
     * @return void
     */
    protected function userQuery()
    {
        $query = $this->context->request;
        $error = $this->context->error;
        
        $this->addQueryToMonoLog($query, $error);
    }
    
    /**
     * Log a query generated by AbstractAction system.
     * 
     * @throws Exception If the context not contain an AbstractAction object.
     * 
     * @return void
     */
    protected function systemQuery()
    {
        if ($this->context instanceof AbstractActions === false) {
            throw new Exception(
                '"system query" event should have an AbstractActions class'
                .' into the context.',
                self::ERR_SYSTEM_QUERY_CONTEXT_CLASS
            );
        }
        
        $query = $this->context->getAssembledRequest();
        $error = $this->context->getLastErrorInfos();
        
        $this->addQueryToMonoLog($query, $error);
    }
    
    /**
     * Send a query to monolog
     * 
     * @param string $query The query to log
     * @param array $error The error infos about the query
     * 
     * @return void
     */
    protected function addQueryToMonoLog($query, $error)
    {
        $this->monolog->getLogger()->debug(
            'Type: '.$this->action.' ; '
            .'Query: '.$query. ' ; '
            .'Errors: '.print_r($error, true)
        );
    }
}
